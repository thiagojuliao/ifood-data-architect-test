{"paragraphs":[{"title":"Inicialização dos pacotes, definindo funções e variáveis","text":"%pyspark\n\n###############################################\n#   Importando pacotes & definindo funções    #\n###############################################\n\nfrom datetime import *\nfrom pyspark import StorageLevel\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import *\nfrom pyspark.sql.types import *\n\n###############################\n#   Definição de variáveis    #\n###############################\n\n# Definição do schema json\nschema = StructType(\n    [\n        StructField(\"created_at\", StringType()),\n        StructField(\"order_id\", StringType()),\n        StructField(\"status_id\", StringType()),\n        StructField(\"value\", StringType())\n    ])\n    \n# Referência de processamento\n#ref = str(datetime.today() - timedelta(days=1))[0:10] \nref = \"2019-01-31\"\n\n# Caminho de origem da pouso order-status\norigem_pouso = \"s3://ifood-landing-order-status/dt={}/*.json\".format(ref)\n\n# Caminho de destino da raw order\ndestino_raw = \"s3://ifood-raw-order-status/\"\n\n# Inicia sessão spark\nspark = SparkSession.builder.appName(\"ifood-landing-order-status-prod\").getOrCreate()\n\n# Configurações básicas para o spark\nspark.conf.set(\"spark.sql.maxPartitionBytes\", 200 * 1024 * 1024) # Seta a quantidade máxima de bytes em uma partição ao ler os arquivos de entrada (Entre 100MB e 200MB é o ideal)\nspark.conf.set(\"spark.sql.sources.partitionOverwriteMode\", \"DYNAMIC\") # Necessário para sobrescrever partições ","user":"anonymous","dateUpdated":"2019-12-23T03:17:05+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1577069133325_-102314154","id":"20191221-124444_835401478","dateCreated":"2019-12-23T02:45:33+0000","dateStarted":"2019-12-23T03:09:54+0000","dateFinished":"2019-12-23T03:09:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:172"},{"title":"Lê os dados da origem","text":"%pyspark\n\n# Lê a pouso de origem\npousoDF = spark.read.schema(schema).json(origem_pouso)","user":"anonymous","dateUpdated":"2019-12-23T03:18:25+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1577069133330_1297474342","id":"20191221-124622_2019804708","dateCreated":"2019-12-23T02:45:33+0000","dateStarted":"2019-12-23T03:18:25+0000","dateFinished":"2019-12-23T03:18:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:173"},{"title":"Criando uma partição atráves da data de registro do pedido","text":"%pyspark\n\n# Adiciona a coluna dt que definirá nossa partição\npousoDF = pousoDF \\\n    .withColumn(\"dt\", expr(\"min(created_at) over(partition by order_id order by order_id)\")) \\\n    .withColumn(\"dt\", col(\"dt\").cast(DateType()))","user":"anonymous","dateUpdated":"2019-12-23T03:18:53+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1577070021369_-635009186","id":"20191223-030021_460147328","dateCreated":"2019-12-23T03:00:21+0000","dateStarted":"2019-12-23T03:18:53+0000","dateFinished":"2019-12-23T03:18:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:174"},{"title":"Cria e grava a tabela raw","text":"%pyspark\n\n# Cria a tabela raw\nrawDF = pousoDF \\\n    .withColumn(\"dt_proc\", current_date()) \\\n    .dropDuplicates()\n    \nrawDF.write.partitionBy(\"dt\").mode(\"overwrite\").option(\"compression\", \"snappy\").format(\"parquet\").save(destino_raw)","user":"anonymous","dateUpdated":"2019-12-23T03:14:44+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1577069133331_1964492081","id":"20191221-124855_1400670421","dateCreated":"2019-12-23T02:45:33+0000","dateStarted":"2019-12-23T03:14:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:175","dateFinished":"2019-12-23T03:14:52+0000","results":{"code":"SUCCESS","msg":[]}},{"title":"Validação","text":"%pyspark\n\n# Leitura da base final\nrawDF_ = spark.read.parquet(destino_raw).filter(col(\"dt\") == lit(ref))\n\n# Validação Volumétrica\nprint(\"> Volumetria de saída equivale-se a de entrada ? --> {}\".format(pousoDF.dropDuplicates().count() == rawDF_.count()))\n\n# Validação do Schema\nschema = pousoDF.schema\nschema_ = rawDF_.drop(\"dt_proc\").schema\ncolunas = pousoDF.columns\ncolunas_ = rawDF_.drop(\"dt_proc\").columns\ncolunas.sort()\ncolunas_.sort()\nprint(\"> O schema de saída equivale-se ao de entrada ? ---> {}\".format(schema == schema_ or colunas == colunas_))","user":"anonymous","dateUpdated":"2019-12-23T03:13:43+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"> Volumetria de saída equivale-se a de entrada ? --> False\n> O schema de saída equivale-se ao de entrada ? ---> True\n"}]},"apps":[],"jobName":"paragraph_1577069133331_1879313835","id":"20191221-125122_890996710","dateCreated":"2019-12-23T02:45:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:176","dateFinished":"2019-12-23T03:13:47+0000","dateStarted":"2019-12-23T03:13:43+0000"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2019-12-23T03:13:47+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1577069133331_1685755091","id":"20191221-172907_1085978558","dateCreated":"2019-12-23T02:45:33+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:177"}],"name":"ifood-landing-order-status-prod","id":"2EWMRZTMH","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}