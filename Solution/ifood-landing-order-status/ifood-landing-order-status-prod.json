{"paragraphs":[{"title":"Inicialização dos pacotes, definindo funções e variáveis","text":"%pyspark\n\n###############################################\n#   Importando pacotes & definindo funções    #\n###############################################\n\nfrom datetime import *\nfrom pyspark import StorageLevel\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import *\nfrom pyspark.sql.types import *\n\n###############################\n#   Definição de variáveis    #\n###############################\n\n# Referência de processamento\n#ref = str(datetime.today() - timedelta(days=1))[0:10] \nref = \"2019-01-31\"\n\n# Caminho de origem da pouso order-status\norigem_pouso = \"s3://ifood-landing-order-status/dt={}/*.json\".format(ref)\n\n# Caminho de destino da raw order\ndestino_raw = \"s3://ifood-raw-order-status/\"\n\n# Inicia sessão spark\nspark = SparkSession.builder.appName(\"ifood-landing-order-status-prod\").getOrCreate()\n\n# Configurações básicas para o spark\nspark.conf.set(\"spark.sql.maxPartitionBytes\", 200 * 1024 * 1024) # Seta a quantidade máxima de bytes em uma partição ao ler os arquivos de entrada (Entre 100MB e 200MB é o ideal)\nspark.conf.set(\"spark.sql.sources.partitionOverwriteMode\", \"DYNAMIC\") # Necessário para sobrescrever partições ","user":"anonymous","dateUpdated":"2019-12-21T17:22:57+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1576948890507_-1723447926","id":"20191221-124444_835401478","dateCreated":"2019-12-21T17:21:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2096","dateFinished":"2019-12-21T17:22:57+0000","dateStarted":"2019-12-21T17:22:57+0000"},{"title":"Lê os dados da origem","text":"%pyspark\n\n# Lê a pouso de origem\npousoDF = spark.read.json(origem_pouso)","user":"anonymous","dateUpdated":"2019-12-21T17:23:52+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1576948890507_388370650","id":"20191221-124622_2019804708","dateCreated":"2019-12-21T17:21:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2097","dateFinished":"2019-12-21T17:23:53+0000","dateStarted":"2019-12-21T17:23:52+0000"},{"title":"Cria e grava a tabela raw","text":"%pyspark\n\n# Cria a tabela raw\nrawDF = pousoDF_ \\\n    .withColumn(\"dt_proc\", current_date()) \\\n    .withColumn(\"dt\", col(\"created_at\").cast(DateType())) \\\n    .dropDuplicates()\n    \nrawDF.write.partitionBy(\"dt\").mode(\"overwrite\").option(\"compression\", \"snappy\").format(\"parquet\").save(destino_raw)","user":"anonymous","dateUpdated":"2019-12-21T17:24:04+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1576948890508_979374300","id":"20191221-124855_1400670421","dateCreated":"2019-12-21T17:21:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2104","dateFinished":"2019-12-21T17:26:50+0000","dateStarted":"2019-12-21T17:24:04+0000"},{"title":"Validação","text":"%pyspark\n\n# Leitura da base final\nrawDF_ = spark.read.parquet(destino_raw).filter(col(\"dt\") == lit(ref))\n\n# Validação Volumétrica\nprint(\"> Volumetria de saída equivale-se a de entrada ? --> {}\".format(pousoDF.dropDuplicates().count() == rawDF_.count()))\n\n# Validação do Schema\nschema = pousoDF.schema\nschema_ = rawDF_.drop(\"dt\", \"dt_proc\").schema\ncolunas = pousoDF.columns\ncolunas_ = rawDF_.drop(\"dt\", \"dt_proc\").columns\ncolunas.sort()\ncolunas_.sort()\nprint(\"> O schema de saída equivale-se ao de entrada ? ---> {}\".format(schema == schema_ or colunas == colunas_))","user":"anonymous","dateUpdated":"2019-12-21T17:29:16+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"> Volumetria de saída equivale-se a de entrada ? --> True\n> O schema de saída equivale-se ao de entrada ? ---> True\n"}]},"apps":[],"jobName":"paragraph_1576948890508_-509177686","id":"20191221-125122_890996710","dateCreated":"2019-12-21T17:21:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2106","dateFinished":"2019-12-21T17:29:19+0000","dateStarted":"2019-12-21T17:29:16+0000"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2019-12-21T17:29:07+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1576949347152_-604058533","id":"20191221-172907_1085978558","dateCreated":"2019-12-21T17:29:07+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3613"}],"name":"ifood-landing-order-status-prod","id":"2EXTY4WYU","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}