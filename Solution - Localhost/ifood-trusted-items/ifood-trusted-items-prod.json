{"paragraphs":[{"text":"%pyspark\n\n###############################################\n#   Importando pacotes & definindo funções    #\n###############################################\n\nfrom datetime import *\nfrom pyspark import StorageLevel\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import *\nfrom pyspark.sql.types import *\n\n###############################\n#   Definição de variáveis    #\n###############################\n\n# Referência de processamento\nref = str(datetime.today() - timedelta(days=1))[0:10]\n\n# Caminho de origem da raw order\norigem_raw = \"hdfs://localhost:9000/ifood-raw-order/dt={}/*.parquet\".format(ref)\n\n# Caminho de destino da trusted items\ndestino_trusted = \"hdfs://localhost:9000/ifood-trusted-items/\"\n\n# Inicia sessão spark\nspark = SparkSession.builder.appName(\"ifood-trusted-items-prod\").getOrCreate()\n\n# Configurações básicas para o spark\nspark.conf.set(\"spark.sql.maxPartitionBytes\", 200 * 1024 * 1024) # Seta a quantidade máxima do tamanho das partições ao ler os arquivos de entrada\nspark.conf.set(\"spark.sql.sources.partitionOverwriteMode\", \"DYNAMIC\") # Necessário para sobrescrever partições\nspark.conf.set(\"spark.default.parallelism\", 100) # Define a quantidade de tasks a serem executadas em paralelo","user":"anonymous","dateUpdated":"2019-12-25T14:35:54-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1577295293500_791040765","id":"20191225-131524_1962480069","dateCreated":"2019-12-25T14:34:53-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7479"},{"title":"Lê a base de origem","text":"%pyspark\n\n# Lê a raw order\nrawDF = spark.read.parquet(origem_raw).select(\"order_id\", \"items\", \"dt\")","user":"anonymous","dateUpdated":"2019-12-25T14:36:01-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1577295293502_-721315925","id":"20191225-131816_325476885","dateCreated":"2019-12-25T14:34:53-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:7480"},{"title":"Explode o array items","text":"%pyspark\n\n# Explodindo a coluna items\nexpDF = rawDF \\\n    .withColumn(\"items\", explode_outer(\"items\"))","user":"anonymous","dateUpdated":"2019-12-25T14:36:20-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1577295293504_-669595920","id":"20191225-132027_1992353080","dateCreated":"2019-12-25T14:34:53-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:7482"},{"title":"Definimos um map para cada elemento do array afim de transformá-los em colunas para facilitar a leitura","text":"%pyspark\n\n# Cria o map de colunas para o array items\nmap_colunas = \\\n[\n    \"order_id\",\n    \"items\",\n    expr(\"items.name as item_name\"),\n    expr(\"items.addition.currency as item_currency\"),\n    expr(\"items.addition.value/100 as item_addition_value\"),\n    expr(\"items.discount.value/100 as item_discount_value\"),\n    expr(\"items.quantity as item_quantity\"),\n    expr(\"items.sequence as item_sequence\"),\n    expr(\"items.unitPrice.value/100 as item_unit_price\"),\n    expr(\"items.externalId as item_external_id\"),\n    expr(\"items.totalValue.value/100 as item_total_value\"),\n    expr(\"items.customerNote as item_customer_note\"),\n    expr(\"items.garnishItems as item_garnish_list\"),\n    expr(\"items.integrationId as item_integration_id\"),\n    expr(\"items.totalAddition.value/100 as item_total_addition_value\"),\n    expr(\"items.totalDiscount.value/100 as total_discount_value\"),\n    \"dt\"\n]\n\n# Aplica o map no dataframe\nmapDF = expDF.select(map_colunas)","user":"anonymous","dateUpdated":"2019-12-25T14:34:53-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1577295293506_-323937295","id":"20191225-132235_1630035315","dateCreated":"2019-12-25T14:34:53-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:7484"},{"title":"Explodindo a coluna item_garnish_list e definindo um novo map para suas colunas","text":"%pyspark\n\n# Explode o array item_garnish_list\nexpDF_ = mapDF \\\n    .withColumn(\"item_garnish_list\", explode_outer(\"item_garnish_list\"))","user":"anonymous","dateUpdated":"2019-12-25T14:36:46-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1577295293508_666419057","id":"20191225-135826_1333122364","dateCreated":"2019-12-25T14:34:53-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:7486"},{"text":"%pyspark\n\n# Cria e aplica o novo map\nmap_colunas_ = \\\n[\n    \"order_id\",\n    \"item_name\",\n    \"item_currency\",\n    \"item_addition_value\",\n    \"item_discount_value\",\n    \"item_quantity\",\n    \"item_sequence\",\n    \"item_unit_price\",\n    \"item_external_id\",\n    \"item_total_value\",\n    \"item_customer_note\",\n    expr(\"item_garnish_list.name as garnish_name\"),\n    expr(\"item_garnish_list.addition.value/100 as garnish_addition_value\"),\n    expr(\"item_garnish_list.discount.value/100 as garnish_discount_value\"),\n    expr(\"item_garnish_list.quantity as garnish_quantity\"),\n    expr(\"item_garnish_list.sequence as garnish_sequence\"),\n    expr(\"item_garnish_list.unitPrice.value/100 as garnish_unit_price\"),\n    expr(\"item_garnish_list.categoryId as garnish_category_id\"),\n    expr(\"item_garnish_list.externalId as garnish_external_id\"),\n    expr(\"item_garnish_list.totalValue.value/100 as garnish_total_value\"),\n    expr(\"item_garnish_list.categoryName as garnish_category_name\"),\n    expr(\"item_garnish_list.integrationId as garnish_integration_id\"),\n    \"item_integration_id\",\n    \"item_total_addition_value\",\n    \"total_discount_value\",\n    expr(\"current_date as dt_proc\"),\n    \"dt\"\n]\n\nmapDF_ = expDF_.select(map_colunas_)","user":"anonymous","dateUpdated":"2019-12-25T14:34:53-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1577295293509_804206709","id":"20191225-141239_171984061","dateCreated":"2019-12-25T14:34:53-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:7487"},{"title":"Grava a base trusted items","text":"%pyspark\n\nmapDF_ \\\n    .repartition(int(spark.conf.get(\"spark.default.parallelism\")), \"dt\") \\\n    .write.mode(\"overwrite\") \\\n    .partitionBy(\"dt\") \\\n    .option(\"compression\", \"snappy\") \\\n    .format(\"parquet\") \\\n    .save(destino_trusted)","user":"anonymous","dateUpdated":"2019-12-25T14:34:53-0300","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1577295293512_-2108911433","id":"20191225-142405_150913814","dateCreated":"2019-12-25T14:34:53-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:7490"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2019-12-25T14:34:53-0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1577295293512_1596548847","id":"20191225-143230_1348839517","dateCreated":"2019-12-25T14:34:53-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:7491"}],"name":"ifood-trusted-items-prod","id":"2EVQ32PWE","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}